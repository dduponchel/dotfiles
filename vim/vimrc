" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
" This must be first, because it changes other options as a side effect.
set nocompatible

call pathogen#infect()
filetype plugin indent on
call pathogen#helptags()

" colorscheme desert
colorscheme vividchalk
" colorscheme molokai

" Attempt to determine the type of a file based on its name and possibly its
" contents.  Use this to allow intelligent auto-indenting for each filetype
" and for plugins that are filetype specific.
filetype plugin on
filetype indent on
" Enable syntax highlighting
syntax on
" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden
"set autochdir
set showmatch
set autowrite

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set undofile                      " enable undo files

" Better command-line completion
set wildmenu
set wildmode=longest:full,full

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch
" find the next match as we type the search
set incsearch
" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase
" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
" set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell.  If visualbell is set, and
" this line is also included, vim will neither flash nor beep.  If visualbell
" is unset, this does nothing.
set t_vb=

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2


" Indicates a fast terminal connection.  More characters will be sent to
" the screen for redrawing, instead of using insert/delete line
" commands.  Improves smoothness of redrawing when there are multiple
" windows and the terminal does not support a scrolling region.
" Also enables the extra writing of characters at the end of each screen
" line for lines that wrap.  This helps when using copy/paste with the
" mouse in an xterm and other terminals.
set ttyfast

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Display line numbers on the left
" set number

" Show the line number relative to the line with the cursor in front of each
" line.
set relativenumber

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=2
set softtabstop=2
set expandtab
set shiftround

" Easy window navigation
noremap <a-left>  <C-w>h
noremap <a-down>  <C-w>j
noremap <a-up>    <C-w>k
noremap <a-right> <C-w>l
noremap <a-h> <C-w>h
noremap <a-j> <C-w>j
noremap <a-k> <C-w>k
noremap <a-l> <C-w>l
noremap <s-h> :bN<cr>
noremap <s-j> :bN<cr>
noremap <s-k> :bn<cr>
noremap <s-l> :bn<cr>
noremap <s-left>  :bN<cr>
noremap <s-down>  :bN<cr>
noremap <s-up>    :bn<cr>
noremap <s-right> :bn<cr>

" like j/k, but when 'wrap' on go N screen lines down/up.
noremap j gj
noremap k gk
noremap <down> gj
noremap <up> gk

noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

" Start scrolling three lines before horizontal border of window.
set scrolloff=3
" Start scrolling three columns before vertical border of window.
set sidescrolloff=3

" Virtual editing means that the cursor can be positioned where there is
" no actual character.  This can be halfway into a tab or beyond the end
" of the line.  Useful for selecting a rectangle in Visual mode and
" editing a table.
set virtualedit+=block

"folding settings
set foldmethod=indent "fold based on indent
set foldnestmax=3 "deepest fold is 3 levels
set nofoldenable "dont fold by default


" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za





" Highlight the screen line of the cursor
" :set cursorline

" mark the ideal max text width
set colorcolumn=+1

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" from http://github.com/bronson/vimsy/blob/master/vimrc :

" BUNDLE: nerdtree
nmap <leader>d :NERDTreeToggle<cr>
nmap <leader>D :NERDTreeFind<cr>

noremap  <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>

au Filetype nerdtree setlocal nolist

let NERDTreeHighlightCursorline=1

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1


" BUNDLE: nerdcommenter

" add a space between the comment delimiter and text
let NERDSpaceDelims=1

" Use Control-/ to toggle comments
nmap <C-/> :call NERDComment(0, "toggle")<CR>
vmap <C-/> <ESC>:call NERDComment(1, "toggle")<CR>
" but most vim implementations produce Control-_ instead of Control-/:
nmap <C-_> :call NERDComment(0, "toggle")<CR>
vmap <C-_> <ESC>:call NERDComment(1, "toggle")<CR>

" BUNDLE: Gundo
noremap  <F3> :GundoToggle<cr>
inoremap <F3> <esc>:GundoToggle<cr>

" vimrc easy edit : reload it if changed.
autocmd! bufwritepost vimrc source ~/.vimrc

" BUNDLE: vim-powerline
let g:Powerline_symbols = 'fancy'
" don't need to see the mode in the command line if we have vim-powerline
" enabled
set noshowmode

" Keep search matches in the middle of the window
nnoremap n nzzzv
nnoremap N Nzzzv

" BUNDLE: syntastic
let g:syntastic_check_on_open=1

" BUNDLE: delimitMate
let g:delimitMate_expand_cr = 1

" BUNDLE: YouCompleteMe
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_insertion = 1

" vim: set foldmethod=marker:
